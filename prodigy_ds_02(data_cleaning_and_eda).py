# -*- coding: utf-8 -*-
"""Prodigy_DS_02(Data Cleaning and EDA)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-vXfHwuozti5bEDWOqiLlFkehyFBV3sB
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/content/gender_submission.csv'  # Replace with your file path
data = pd.read_csv(file_path)

# Display the first few rows to understand the data
print(data.head())

# Check for missing values
print(data.isnull().sum())

# Get an overview of the data
print(data.info())
print(data.describe())

# Ensure correct column names, adjust if needed
print(data.columns)

# If the column names differ or need correction, make adjustments here
# For example, ensure 'Sex' or other necessary columns exist:
# data.rename(columns={'sex_column_name_in_dataset': 'Sex'}, inplace=True)

# Visualizing Survival Counts
sns.countplot(data['Survived'], palette='viridis')
plt.title('Survival Count (0 - Not Survived, 1 - Survived)')
plt.show()

# If 'Sex' exists in the dataset, visualize survival by gender
if 'Sex' in data.columns:
    sns.countplot(x='Survived', hue='Sex', data=data, palette='pastel')
    plt.title('Survival Count by Gender')
    plt.show()
else:
    print("Column 'Sex' not found in the dataset. Please verify the column names.")

# Explore other columns or relationships similarly using appropriate visualizations

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/content/gender_submission.csv'  # Replace with your file path
data = pd.read_csv(file_path)

# Display the first few rows to understand the data
print(data.head())

# Check for missing values and inspect column names
print(data.isnull().sum())
print(data.columns)

# Get an overview of the data
print(data.info())
print(data.describe())

# If the column names differ or need correction, make adjustments here
# For example, ensure 'Sex' or other necessary columns exist:
# data.rename(columns={'sex_column_name_in_dataset': 'Sex'}, inplace=True)

# Check the unique values in the dataset's columns to identify similar columns
for column in data.columns:
    print(f"Column: {column} - Unique Values: {data[column].unique()}")

# Adjust the code accordingly if the column names differ from the expected names ('Sex', 'Survived', etc.)